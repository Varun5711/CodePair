pipeline {
    agent { label 'agentjnlp' }

    stages {
        stage("Code Cloning") {
            steps {
                script {
                    cloningCode("https://github.com/Varun5711/CodePair", "main")
                }
            }
        }

        stage("Setup .env.local") {
            steps {
                script {
                    generateEnvFile(
                        credentials: [
                            string(credentialsId: 'convex_deployment', variable: 'CONVEX_DEPLOYMENT'),
                            string(credentialsId: 'next_public_clerk_key', variable: 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY'),
                            string(credentialsId: 'clerk_secret_key', variable: 'CLERK_SECRET_KEY'),
                            string(credentialsId: 'next_convex_key', variable: 'NEXT_PUBLIC_CONVEX_URL'),
                            string(credentialsId: 'next_stream_key', variable: 'NEXT_PUBLIC_STREAM_API_KEY'),
                            string(credentialsId: 'steam_key', variable: 'STREAM_SECRET_KEY')
                        ],
                        workDir: '/home/agentjenkins/jenkins/workspace/CodePairPipeline',
                        envFilePath: '.env.local'
                    )
                }
            }
        }

        stage("Build") {
            steps {
                script {
                    dockerBuild(
                        image: 'codepair:latest',
                        context: '.',
                        noCache: true
                    )
                }
            }
        }

        stage("Push To Docker Hub") {
            steps {
                script {
                    pushToDockerHub(
                        image: 'codepair:latest',
                        credentialsId: 'docker-hub-credentials',
                        localTag: 'codepair:latest'
                    )
                }
            }
        }

        stage("Deploy") {
            steps {
                script {
                    deployCode()
                }
            }
        }
    }
}
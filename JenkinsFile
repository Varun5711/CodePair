pipeline {
    agent { label 'agentjnlp' }
    
    stages {
        stage("Code Cloning") {
            steps {
                echo "Cloning the code..."
                git url: "https://github.com/Varun5711/CodePair", branch: "main"
            }
        }
        
        stage("Setup .env.local") {
            steps {
                // Use Jenkins credentials store
                withCredentials([
                    string(credentialsId: 'convex_deployment', variable: 'CONVEX_DEPLOYMENT'),
                    string(credentialsId: 'next_public_clerk_key', variable: 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY'),
                    string(credentialsId: 'clerk_secret_key', variable: 'CLERK_SECRET_KEY'),
                    string(credentialsId: 'next_convex_key', variable: 'NEXT_PUBLIC_CONVEX_URL'),
                    string(credentialsId: 'next_stream_key', variable: 'NEXT_PUBLIC_STREAM_API_KEY'),
                    string(credentialsId: 'steam_key', variable: 'STREAM_SECRET_KEY')
                ]) {
                    sh '''
                        # Go to the cloned project directory
                        cd /home/agentjenkins/jenkins/workspace/CodePairPipeline
                        
                        # Remove the example file if it exists
                        [ -f .env.example ] && rm .env.example
                        
                        # Create .env.local file using environment variables
                        cat <<EOF > .env.local
CONVEX_DEPLOYMENT=${CONVEX_DEPLOYMENT}
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
NEXT_PUBLIC_CONVEX_URL=${NEXT_PUBLIC_CONVEX_URL}
NEXT_PUBLIC_STREAM_API_KEY=${NEXT_PUBLIC_STREAM_API_KEY}
STREAM_SECRET_KEY=${STREAM_SECRET_KEY}
EOF
                    '''
                }
                echo ".env.local file created with environment variables"
            }
        }
        
        stage("Build") {
            steps {
                echo "Building the code"
                script {
                    try {
                        sh "docker build -t codepair:latest ."
                    } catch (Exception e) {
                        echo "‚ùå Build failed. This might be due to invalid environment variables."
                        echo "üí° Check your API keys in Jenkins credentials for:"
                        echo "   - Extra spaces or newlines"
                        echo "   - Invalid characters"
                        echo "   - Incomplete keys"
                        throw e
                    }
                }
            }
        }
        
        stage("Push To Docker Hub") {
            steps {
                echo "Pushing the code to Docker Hub"
                // Add your Docker Hub credentials here too
            }
        }
        
        stage("Deploy") {
            steps {
                echo "Deploying the code"
                sh "docker compose up -d"
            }
        }
    }
}